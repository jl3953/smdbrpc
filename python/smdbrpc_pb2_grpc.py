# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import smdbrpc_pb2 as smdbrpc__pb2


class HotshardGatewayStub(object):
    """The greeting service definition.
    Sends a greeting
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateCicadaStats = channel.unary_unary(
                '/smdbrpc.HotshardGateway/CalculateCicadaStats',
                request_serializer=smdbrpc__pb2.CalculateCicadaReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.CalculateCicadaStatsResp.FromString,
                )
        self.ContactHotshard = channel.unary_unary(
                '/smdbrpc.HotshardGateway/ContactHotshard',
                request_serializer=smdbrpc__pb2.HotshardRequest.SerializeToString,
                response_deserializer=smdbrpc__pb2.HotshardReply.FromString,
                )
        self.DemoteKey = channel.unary_unary(
                '/smdbrpc.HotshardGateway/DemoteKey',
                request_serializer=smdbrpc__pb2.KeyMigrationReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.KeyMigrationStatus.FromString,
                )
        self.DemoteKeys = channel.unary_unary(
                '/smdbrpc.HotshardGateway/DemoteKeys',
                request_serializer=smdbrpc__pb2.MultiKeyMigrationReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.MultiKeyMigrationStatus.FromString,
                )
        self.PromoteKey = channel.unary_unary(
                '/smdbrpc.HotshardGateway/PromoteKey',
                request_serializer=smdbrpc__pb2.KeyMigrationReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.KeyMigrationStatus.FromString,
                )
        self.PromoteKeys = channel.unary_unary(
                '/smdbrpc.HotshardGateway/PromoteKeys',
                request_serializer=smdbrpc__pb2.MultiKeyMigrationReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.MultiKeyMigrationStatus.FromString,
                )
        self.RequestCRDBKeyStats = channel.unary_unary(
                '/smdbrpc.HotshardGateway/RequestCRDBKeyStats',
                request_serializer=smdbrpc__pb2.KeyStatsRequest.SerializeToString,
                response_deserializer=smdbrpc__pb2.CRDBKeyStatsResponse.FromString,
                )
        self.SendTxn = channel.unary_unary(
                '/smdbrpc.HotshardGateway/SendTxn',
                request_serializer=smdbrpc__pb2.TxnReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.TxnResp.FromString,
                )
        self.TriggerDemotionByNums = channel.unary_unary(
                '/smdbrpc.HotshardGateway/TriggerDemotionByNums',
                request_serializer=smdbrpc__pb2.TriggerDemotionByNumsReq.SerializeToString,
                response_deserializer=smdbrpc__pb2.TriggerDemotionByNumsResp.FromString,
                )
        self.TriggerDemotion = channel.unary_unary(
                '/smdbrpc.HotshardGateway/TriggerDemotion',
                request_serializer=smdbrpc__pb2.TriggerDemotionRequest.SerializeToString,
                response_deserializer=smdbrpc__pb2.TriggerDemotionReply.FromString,
                )


class HotshardGatewayServicer(object):
    """The greeting service definition.
    Sends a greeting
    """

    def CalculateCicadaStats(self, request, context):
        """Asks Cicada whether it will 1) only demote keys, 2) only request CRDB promotions,
        or 3) ask CRDB to trigger demotions and promotions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactHotshard(self, request, context):
        """a txn to the hotshard
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DemoteKey(self, request, context):
        """(singular) Demotes a key from Cicada to CRDB
        (multiple) Demotes multiple keys from Cicada to CRDB (this essentially calls
        DemoteKey, but the asynchronous batching is handled on Cicada's side
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DemoteKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PromoteKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PromoteKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCRDBKeyStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerDemotionByNums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerDemotion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HotshardGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateCicadaStats': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateCicadaStats,
                    request_deserializer=smdbrpc__pb2.CalculateCicadaReq.FromString,
                    response_serializer=smdbrpc__pb2.CalculateCicadaStatsResp.SerializeToString,
            ),
            'ContactHotshard': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactHotshard,
                    request_deserializer=smdbrpc__pb2.HotshardRequest.FromString,
                    response_serializer=smdbrpc__pb2.HotshardReply.SerializeToString,
            ),
            'DemoteKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DemoteKey,
                    request_deserializer=smdbrpc__pb2.KeyMigrationReq.FromString,
                    response_serializer=smdbrpc__pb2.KeyMigrationStatus.SerializeToString,
            ),
            'DemoteKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.DemoteKeys,
                    request_deserializer=smdbrpc__pb2.MultiKeyMigrationReq.FromString,
                    response_serializer=smdbrpc__pb2.MultiKeyMigrationStatus.SerializeToString,
            ),
            'PromoteKey': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoteKey,
                    request_deserializer=smdbrpc__pb2.KeyMigrationReq.FromString,
                    response_serializer=smdbrpc__pb2.KeyMigrationStatus.SerializeToString,
            ),
            'PromoteKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoteKeys,
                    request_deserializer=smdbrpc__pb2.MultiKeyMigrationReq.FromString,
                    response_serializer=smdbrpc__pb2.MultiKeyMigrationStatus.SerializeToString,
            ),
            'RequestCRDBKeyStats': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCRDBKeyStats,
                    request_deserializer=smdbrpc__pb2.KeyStatsRequest.FromString,
                    response_serializer=smdbrpc__pb2.CRDBKeyStatsResponse.SerializeToString,
            ),
            'SendTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTxn,
                    request_deserializer=smdbrpc__pb2.TxnReq.FromString,
                    response_serializer=smdbrpc__pb2.TxnResp.SerializeToString,
            ),
            'TriggerDemotionByNums': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerDemotionByNums,
                    request_deserializer=smdbrpc__pb2.TriggerDemotionByNumsReq.FromString,
                    response_serializer=smdbrpc__pb2.TriggerDemotionByNumsResp.SerializeToString,
            ),
            'TriggerDemotion': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerDemotion,
                    request_deserializer=smdbrpc__pb2.TriggerDemotionRequest.FromString,
                    response_serializer=smdbrpc__pb2.TriggerDemotionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smdbrpc.HotshardGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HotshardGateway(object):
    """The greeting service definition.
    Sends a greeting
    """

    @staticmethod
    def CalculateCicadaStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/CalculateCicadaStats',
            smdbrpc__pb2.CalculateCicadaReq.SerializeToString,
            smdbrpc__pb2.CalculateCicadaStatsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactHotshard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/ContactHotshard',
            smdbrpc__pb2.HotshardRequest.SerializeToString,
            smdbrpc__pb2.HotshardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DemoteKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/DemoteKey',
            smdbrpc__pb2.KeyMigrationReq.SerializeToString,
            smdbrpc__pb2.KeyMigrationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DemoteKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/DemoteKeys',
            smdbrpc__pb2.MultiKeyMigrationReq.SerializeToString,
            smdbrpc__pb2.MultiKeyMigrationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PromoteKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/PromoteKey',
            smdbrpc__pb2.KeyMigrationReq.SerializeToString,
            smdbrpc__pb2.KeyMigrationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PromoteKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/PromoteKeys',
            smdbrpc__pb2.MultiKeyMigrationReq.SerializeToString,
            smdbrpc__pb2.MultiKeyMigrationStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestCRDBKeyStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/RequestCRDBKeyStats',
            smdbrpc__pb2.KeyStatsRequest.SerializeToString,
            smdbrpc__pb2.CRDBKeyStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/SendTxn',
            smdbrpc__pb2.TxnReq.SerializeToString,
            smdbrpc__pb2.TxnResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TriggerDemotionByNums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/TriggerDemotionByNums',
            smdbrpc__pb2.TriggerDemotionByNumsReq.SerializeToString,
            smdbrpc__pb2.TriggerDemotionByNumsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TriggerDemotion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smdbrpc.HotshardGateway/TriggerDemotion',
            smdbrpc__pb2.TriggerDemotionRequest.SerializeToString,
            smdbrpc__pb2.TriggerDemotionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
