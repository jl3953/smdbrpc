// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HotshardGatewayClient is the client API for HotshardGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotshardGatewayClient interface {
	// Sends a greeting
	ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error)
}

type hotshardGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewHotshardGatewayClient(cc grpc.ClientConnInterface) HotshardGatewayClient {
	return &hotshardGatewayClient{cc}
}

func (c *hotshardGatewayClient) ContactHotshard(ctx context.Context, in *HotshardRequest, opts ...grpc.CallOption) (*HotshardReply, error) {
	out := new(HotshardReply)
	err := c.cc.Invoke(ctx, "/smdbrpc.HotshardGateway/ContactHotshard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotshardGatewayServer is the server API for HotshardGateway service.
// All implementations must embed UnimplementedHotshardGatewayServer
// for forward compatibility
type HotshardGatewayServer interface {
	// Sends a greeting
	ContactHotshard(context.Context, *HotshardRequest) (*HotshardReply, error)
	mustEmbedUnimplementedHotshardGatewayServer()
}

// UnimplementedHotshardGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedHotshardGatewayServer struct {
}

func (UnimplementedHotshardGatewayServer) ContactHotshard(context.Context, *HotshardRequest) (*HotshardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactHotshard not implemented")
}
func (UnimplementedHotshardGatewayServer) mustEmbedUnimplementedHotshardGatewayServer() {}

// UnsafeHotshardGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotshardGatewayServer will
// result in compilation errors.
type UnsafeHotshardGatewayServer interface {
	mustEmbedUnimplementedHotshardGatewayServer()
}

func RegisterHotshardGatewayServer(s *grpc.Server, srv HotshardGatewayServer) {
	s.RegisterService(&_HotshardGateway_serviceDesc, srv)
}

func _HotshardGateway_ContactHotshard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotshardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smdbrpc.HotshardGateway/ContactHotshard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotshardGatewayServer).ContactHotshard(ctx, req.(*HotshardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotshardGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smdbrpc.HotshardGateway",
	HandlerType: (*HotshardGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContactHotshard",
			Handler:    _HotshardGateway_ContactHotshard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smdbrpc.proto",
}
