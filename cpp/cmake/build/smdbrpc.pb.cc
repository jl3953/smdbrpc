// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smdbrpc.proto

#include "smdbrpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace smdbrpc {
class HotshardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HotshardRequest> _instance;
} _HotshardRequest_default_instance_;
class HotshardReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HotshardReply> _instance;
} _HotshardReply_default_instance_;
}  // namespace smdbrpc
static void InitDefaultsscc_info_HotshardReply_smdbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smdbrpc::_HotshardReply_default_instance_;
    new (ptr) ::smdbrpc::HotshardReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smdbrpc::HotshardReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HotshardReply_smdbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HotshardReply_smdbrpc_2eproto}, {}};

static void InitDefaultsscc_info_HotshardRequest_smdbrpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::smdbrpc::_HotshardRequest_default_instance_;
    new (ptr) ::smdbrpc::HotshardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::smdbrpc::HotshardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HotshardRequest_smdbrpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HotshardRequest_smdbrpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_smdbrpc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_smdbrpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_smdbrpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_smdbrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smdbrpc::HotshardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smdbrpc::HotshardRequest, sqlstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smdbrpc::HotshardReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smdbrpc::HotshardReply, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::smdbrpc::HotshardRequest)},
  { 6, -1, sizeof(::smdbrpc::HotshardReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smdbrpc::_HotshardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smdbrpc::_HotshardReply_default_instance_),
};

const char descriptor_table_protodef_smdbrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsmdbrpc.proto\022\007smdbrpc\"$\n\017HotshardRequ"
  "est\022\021\n\tsqlstring\030\001 \001(\t\"\037\n\rHotshardReply\022"
  "\016\n\006status\030\001 \001(\t2X\n\017HotshardGateway\022E\n\017Co"
  "ntactHotshard\022\030.smdbrpc.HotshardRequest\032"
  "\026.smdbrpc.HotshardReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_smdbrpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_smdbrpc_2eproto_sccs[2] = {
  &scc_info_HotshardReply_smdbrpc_2eproto.base,
  &scc_info_HotshardRequest_smdbrpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_smdbrpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smdbrpc_2eproto = {
  false, false, descriptor_table_protodef_smdbrpc_2eproto, "smdbrpc.proto", 193,
  &descriptor_table_smdbrpc_2eproto_once, descriptor_table_smdbrpc_2eproto_sccs, descriptor_table_smdbrpc_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_smdbrpc_2eproto::offsets,
  file_level_metadata_smdbrpc_2eproto, 2, file_level_enum_descriptors_smdbrpc_2eproto, file_level_service_descriptors_smdbrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_smdbrpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_smdbrpc_2eproto)), true);
namespace smdbrpc {

// ===================================================================

void HotshardRequest::InitAsDefaultInstance() {
}
class HotshardRequest::_Internal {
 public:
};

HotshardRequest::HotshardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:smdbrpc.HotshardRequest)
}
HotshardRequest::HotshardRequest(const HotshardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sqlstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sqlstring().empty()) {
    sqlstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sqlstring(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:smdbrpc.HotshardRequest)
}

void HotshardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HotshardRequest_smdbrpc_2eproto.base);
  sqlstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HotshardRequest::~HotshardRequest() {
  // @@protoc_insertion_point(destructor:smdbrpc.HotshardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HotshardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sqlstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HotshardRequest::ArenaDtor(void* object) {
  HotshardRequest* _this = reinterpret_cast< HotshardRequest* >(object);
  (void)_this;
}
void HotshardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HotshardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HotshardRequest& HotshardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HotshardRequest_smdbrpc_2eproto.base);
  return *internal_default_instance();
}


void HotshardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:smdbrpc.HotshardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sqlstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotshardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sqlstring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sqlstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smdbrpc.HotshardRequest.sqlstring"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HotshardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smdbrpc.HotshardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sqlstring = 1;
  if (this->sqlstring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sqlstring().data(), static_cast<int>(this->_internal_sqlstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smdbrpc.HotshardRequest.sqlstring");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sqlstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smdbrpc.HotshardRequest)
  return target;
}

size_t HotshardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smdbrpc.HotshardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sqlstring = 1;
  if (this->sqlstring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sqlstring());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HotshardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smdbrpc.HotshardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HotshardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HotshardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smdbrpc.HotshardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smdbrpc.HotshardRequest)
    MergeFrom(*source);
  }
}

void HotshardRequest::MergeFrom(const HotshardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smdbrpc.HotshardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sqlstring().size() > 0) {
    _internal_set_sqlstring(from._internal_sqlstring());
  }
}

void HotshardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smdbrpc.HotshardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotshardRequest::CopyFrom(const HotshardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smdbrpc.HotshardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotshardRequest::IsInitialized() const {
  return true;
}

void HotshardRequest::InternalSwap(HotshardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sqlstring_.Swap(&other->sqlstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HotshardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HotshardReply::InitAsDefaultInstance() {
}
class HotshardReply::_Internal {
 public:
};

HotshardReply::HotshardReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:smdbrpc.HotshardReply)
}
HotshardReply::HotshardReply(const HotshardReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:smdbrpc.HotshardReply)
}

void HotshardReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HotshardReply_smdbrpc_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HotshardReply::~HotshardReply() {
  // @@protoc_insertion_point(destructor:smdbrpc.HotshardReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HotshardReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HotshardReply::ArenaDtor(void* object) {
  HotshardReply* _this = reinterpret_cast< HotshardReply* >(object);
  (void)_this;
}
void HotshardReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HotshardReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HotshardReply& HotshardReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HotshardReply_smdbrpc_2eproto.base);
  return *internal_default_instance();
}


void HotshardReply::Clear() {
// @@protoc_insertion_point(message_clear_start:smdbrpc.HotshardReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HotshardReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smdbrpc.HotshardReply.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HotshardReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smdbrpc.HotshardReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smdbrpc.HotshardReply.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smdbrpc.HotshardReply)
  return target;
}

size_t HotshardReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smdbrpc.HotshardReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HotshardReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smdbrpc.HotshardReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HotshardReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HotshardReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smdbrpc.HotshardReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smdbrpc.HotshardReply)
    MergeFrom(*source);
  }
}

void HotshardReply::MergeFrom(const HotshardReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smdbrpc.HotshardReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void HotshardReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smdbrpc.HotshardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotshardReply::CopyFrom(const HotshardReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smdbrpc.HotshardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotshardReply::IsInitialized() const {
  return true;
}

void HotshardReply::InternalSwap(HotshardReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HotshardReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace smdbrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::smdbrpc::HotshardRequest* Arena::CreateMaybeMessage< ::smdbrpc::HotshardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smdbrpc::HotshardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::smdbrpc::HotshardReply* Arena::CreateMaybeMessage< ::smdbrpc::HotshardReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smdbrpc::HotshardReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
