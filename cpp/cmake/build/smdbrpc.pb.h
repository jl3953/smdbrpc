// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smdbrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smdbrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smdbrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smdbrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smdbrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smdbrpc_2eproto;
namespace smdbrpc {
class HotshardReply;
class HotshardReplyDefaultTypeInternal;
extern HotshardReplyDefaultTypeInternal _HotshardReply_default_instance_;
class HotshardRequest;
class HotshardRequestDefaultTypeInternal;
extern HotshardRequestDefaultTypeInternal _HotshardRequest_default_instance_;
}  // namespace smdbrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::smdbrpc::HotshardReply* Arena::CreateMaybeMessage<::smdbrpc::HotshardReply>(Arena*);
template<> ::smdbrpc::HotshardRequest* Arena::CreateMaybeMessage<::smdbrpc::HotshardRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smdbrpc {

// ===================================================================

class HotshardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smdbrpc.HotshardRequest) */ {
 public:
  inline HotshardRequest() : HotshardRequest(nullptr) {}
  virtual ~HotshardRequest();

  HotshardRequest(const HotshardRequest& from);
  HotshardRequest(HotshardRequest&& from) noexcept
    : HotshardRequest() {
    *this = ::std::move(from);
  }

  inline HotshardRequest& operator=(const HotshardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotshardRequest& operator=(HotshardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotshardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HotshardRequest* internal_default_instance() {
    return reinterpret_cast<const HotshardRequest*>(
               &_HotshardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HotshardRequest& a, HotshardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HotshardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotshardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HotshardRequest* New() const final {
    return CreateMaybeMessage<HotshardRequest>(nullptr);
  }

  HotshardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotshardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotshardRequest& from);
  void MergeFrom(const HotshardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotshardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smdbrpc.HotshardRequest";
  }
  protected:
  explicit HotshardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smdbrpc_2eproto);
    return ::descriptor_table_smdbrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlstringFieldNumber = 1,
  };
  // string sqlstring = 1;
  void clear_sqlstring();
  const std::string& sqlstring() const;
  void set_sqlstring(const std::string& value);
  void set_sqlstring(std::string&& value);
  void set_sqlstring(const char* value);
  void set_sqlstring(const char* value, size_t size);
  std::string* mutable_sqlstring();
  std::string* release_sqlstring();
  void set_allocated_sqlstring(std::string* sqlstring);
  private:
  const std::string& _internal_sqlstring() const;
  void _internal_set_sqlstring(const std::string& value);
  std::string* _internal_mutable_sqlstring();
  public:

  // @@protoc_insertion_point(class_scope:smdbrpc.HotshardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sqlstring_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smdbrpc_2eproto;
};
// -------------------------------------------------------------------

class HotshardReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smdbrpc.HotshardReply) */ {
 public:
  inline HotshardReply() : HotshardReply(nullptr) {}
  virtual ~HotshardReply();

  HotshardReply(const HotshardReply& from);
  HotshardReply(HotshardReply&& from) noexcept
    : HotshardReply() {
    *this = ::std::move(from);
  }

  inline HotshardReply& operator=(const HotshardReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HotshardReply& operator=(HotshardReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HotshardReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HotshardReply* internal_default_instance() {
    return reinterpret_cast<const HotshardReply*>(
               &_HotshardReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HotshardReply& a, HotshardReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HotshardReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HotshardReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HotshardReply* New() const final {
    return CreateMaybeMessage<HotshardReply>(nullptr);
  }

  HotshardReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HotshardReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HotshardReply& from);
  void MergeFrom(const HotshardReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HotshardReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smdbrpc.HotshardReply";
  }
  protected:
  explicit HotshardReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_smdbrpc_2eproto);
    return ::descriptor_table_smdbrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:smdbrpc.HotshardReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smdbrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HotshardRequest

// string sqlstring = 1;
inline void HotshardRequest::clear_sqlstring() {
  sqlstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HotshardRequest::sqlstring() const {
  // @@protoc_insertion_point(field_get:smdbrpc.HotshardRequest.sqlstring)
  return _internal_sqlstring();
}
inline void HotshardRequest::set_sqlstring(const std::string& value) {
  _internal_set_sqlstring(value);
  // @@protoc_insertion_point(field_set:smdbrpc.HotshardRequest.sqlstring)
}
inline std::string* HotshardRequest::mutable_sqlstring() {
  // @@protoc_insertion_point(field_mutable:smdbrpc.HotshardRequest.sqlstring)
  return _internal_mutable_sqlstring();
}
inline const std::string& HotshardRequest::_internal_sqlstring() const {
  return sqlstring_.Get();
}
inline void HotshardRequest::_internal_set_sqlstring(const std::string& value) {
  
  sqlstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HotshardRequest::set_sqlstring(std::string&& value) {
  
  sqlstring_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smdbrpc.HotshardRequest.sqlstring)
}
inline void HotshardRequest::set_sqlstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sqlstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:smdbrpc.HotshardRequest.sqlstring)
}
inline void HotshardRequest::set_sqlstring(const char* value,
    size_t size) {
  
  sqlstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smdbrpc.HotshardRequest.sqlstring)
}
inline std::string* HotshardRequest::_internal_mutable_sqlstring() {
  
  return sqlstring_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HotshardRequest::release_sqlstring() {
  // @@protoc_insertion_point(field_release:smdbrpc.HotshardRequest.sqlstring)
  return sqlstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotshardRequest::set_allocated_sqlstring(std::string* sqlstring) {
  if (sqlstring != nullptr) {
    
  } else {
    
  }
  sqlstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sqlstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smdbrpc.HotshardRequest.sqlstring)
}

// -------------------------------------------------------------------

// HotshardReply

// string status = 1;
inline void HotshardReply::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HotshardReply::status() const {
  // @@protoc_insertion_point(field_get:smdbrpc.HotshardReply.status)
  return _internal_status();
}
inline void HotshardReply::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smdbrpc.HotshardReply.status)
}
inline std::string* HotshardReply::mutable_status() {
  // @@protoc_insertion_point(field_mutable:smdbrpc.HotshardReply.status)
  return _internal_mutable_status();
}
inline const std::string& HotshardReply::_internal_status() const {
  return status_.Get();
}
inline void HotshardReply::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HotshardReply::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smdbrpc.HotshardReply.status)
}
inline void HotshardReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:smdbrpc.HotshardReply.status)
}
inline void HotshardReply::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smdbrpc.HotshardReply.status)
}
inline std::string* HotshardReply::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HotshardReply::release_status() {
  // @@protoc_insertion_point(field_release:smdbrpc.HotshardReply.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HotshardReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smdbrpc.HotshardReply.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace smdbrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smdbrpc_2eproto
